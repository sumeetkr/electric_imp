// Semester Project for Connected Embedded Systems Architecture — Version 0
// Author: Sumeet Kumar (and WWW)
// 7-9-2013
// Device code
//Global Variables
debug <- 0;
log <- 0;
//Sample counter
sampleCounter <- 0;
local id = hardware.getimpeeid(); 
local device_id = hardware.getimpeeid();
local frequency = 1;
local wakeupTime = 2; 
local acc_x_val;
local acc_y_val;
local acc_z_val;
local temp_val;
local light_val;
local pressure_val;
local humidity_val;
local motion_val;
local audio_val;

agent.on("set_frequency", function(freq) {
    set_frequency(freq);
});

function set_frequency(freq)
{
    server.log("frequency changed to " + freq);
    if(freq.tointeger()!=0)
    {
     wakeupTime = 1/(freq.tointeger());   
    }
}

//get device specific config
//agent.send("update_config", id);

// Semester Project for Connected Embedded Systems Architecture — Version 0
// Author: Nathan Martin
// 7-22-2013
// Designed to work with CMU SV 18647 CESA Electric Imp Board V1 with FireFly Environmental Board attached 
// and connected to April Electric Imp board for life support (ID Chip: Atmel ATSHA204)


//Output Ports
microphone_output <- OutputPort("Mic Samples", "number");
motion_output <- OutputPort("Motion", "number"); 
rssi_output <- OutputPort("RSSI", "number");
internal_voltage_output <- OutputPort("InternalVoltage", "number");
light_output <- OutputPort("Light", "number");
acc_x_output <- OutputPort("Acc_X", "number");
acc_y_output <- OutputPort("Acc_Y", "number");
acc_z_output <- OutputPort("Acc_Z", "number");
humidity_output <- OutputPort("Humidity", "number");
temperature_output <- OutputPort("Temperature", "number");
pressure_output <- OutputPort("Pressure", "number");

// Configure hardware
// analog inputs read a value between 0 (for 0 V) and 65,535 (16-bit ADC) for the imp's supply voltage (<3.3V)
hardware.pin7.configure(ANALOG_IN);// analog input for motion

function bit_value(bit){
    return (1 << bit);
}

function motionSensorRead(){
    local motionSensorReading = hardware.pin8.read();
    local motionSensorThreshold = 30000;
    if(motionSensorReading > motionSensorThreshold){
        motion_output.set(1);
        if(log){
            server.log("Stop moving, dag'nabit!");            
        }
        motion_val = 1;
    }
    else{
        motion_output.set(0);
        if(log){
            server.log("Omg. I'm scared. No one's here...");
        }
        motion_val = 0;
    }
//    server.log(motionSensorReading);
}

function samplesReady(buffer, length)
{
    server.show("Collected " + sampleCounter + " samples");
    if (length > 0) {
        for(local a=0;a<200;a+=1){
//            microphone_output.set(buffer[a]);
            audio_val = buffer[a];
            //agent.send("sendMicrophoneToOpenSense", buffer[a]);
//            server.log(buffer[a]);            
        }
//      server.log(length);
    } else {
//      server.log("Overrun");
    }
    sampleCounter++;
}
 
function stopSampler()
{
    server.log("stop");
    hardware.sampler.stop();
}
 
function microphoneSample(){
    buffer1 <- blob(2000);
    hardware.sampler.configure(hardware.pin8, 1000, [buffer1], samplesReady);
    hardware.sampler.start();
    //imp.wakeup(4, stopSampler);
} 

function readRSSI(){
    rssi_output.set(imp.rssi());
}

function readInternalVoltage(){
    internal_voltage_output.set(hardware.voltage());
}
 

//Pressure Module
pressure_module_address_write <- 0xEE;
pressure_module_address_read <- 0xEF;
pressure_control_register_address <- 0xf4;
pressure_control_register_value_temperature_start <- 0x2e;
pressure_control_register_value_MSB <- 0xF6;
pressure_control_register_value_LSB <- 0xF7;
pressure_control_register_value_XLSB <- 0xF8;

//Pressure resolution vs power settings
pressure_control_register_value <- 0x34;
pressure_ultra_low_power_oversampling_setting <- 0;
pressure_standard_resolution_oversampling_setting <- 1;
pressure_high_resolution_oversampling_setting <- 2;
pressure_ultra_high_resolution_oversampling_setting <- 3;
pressure_oversampling_setting <- pressure_high_resolution_oversampling_setting;//Select one of the four pressure settings for the pressureRead() function
pressure_control_register_value_start <- (pressure_control_register_value) + (pressure_oversampling_setting<<6); 

pressure_ultra_low_power_conv_time <- 0.0045; // 4.5 ms
pressure_standard_resolution_conv_time <- 0.008; //ms
pressure_high_resolution_conv_time <- 0.014; //ms 
pressure_ultra_high_resolution_conv_time <- 0.026; //ms
pressure_conv_time <- pressure_high_resolution_conv_time; //Select 1 of the 4

pressure_bytes_convert <- 3;

pressure_calibration_AC1_MSB_addr <- 0xAA;
pressure_calibration_AC4_MSB_addr <- 0xB0;
pressure_calibration_AC5_MSB_addr <- 0xB2;
pressure_calibration_AC6_MSB_addr <- 0xB4;
pressure_calibration_MD_MSB_addr <- 0xBE;


AC1 <- 0;
AC2 <- 0;
AC3 <- 0;
AC4 <- 0;
AC5 <- 0;
AC6 <- 0;
B1 <- 0;
B2 <- 0;
B5 <- 0;
MB <- 0;
MC <- 0;
MD <- 0;
calibration_array <- [];

function correct_signed_representation_calibration_constants(arry){
    if(arry[0] & 0x80){
        return (arry[0]<<8) + arry[1] + 0xFFFF0000;
    }
    else{
        return (arry[0]<<8) + arry[1];
    }
}

function correct_unsigned_representation_calibration_constants(arry){
    local value = (arry[0]<<8) + arry[1];
    return value;
}

function correct_unsigned_representation_pressure(arry){
    //The datasheet is wrong, the return type of the uncompensated pressure value is an unsigned long
    return (arry[0]<<16) + (arry[1]<<8) + arry[2];
}

function bmp085_get_cal_params(){
    calibration_array.clear();
    local temp_array = [];
    local is_i2c_available_flag = 0;
    imp.sleep(0.1);
    for(local i = pressure_calibration_AC1_MSB_addr; i <= pressure_calibration_MD_MSB_addr; i+=2){
        ;
        
        if(hardware.i2c12.write(pressure_module_address_write, format("%c", i)) == 0){
            is_i2c_available_flag = 1;
        }
        else{
            if(log){
              server.log("I2C device (pressure) not responding...");
            }
            is_i2c_available_flag = 0;
        }
        if(is_i2c_available_flag){
            temp_array = hardware.i2c12.read(pressure_module_address_read, "", 2);
            if((i == pressure_calibration_AC4_MSB_addr) || (i == pressure_calibration_AC5_MSB_addr) || (i == pressure_calibration_AC6_MSB_addr)){
                calibration_array.push(correct_unsigned_representation_calibration_constants(temp_array));    
            }
            else{
                calibration_array.push(correct_signed_representation_calibration_constants(temp_array));
            }            
        }
    }
    if(is_i2c_available_flag){
        AC1 = calibration_array[1-1];
        AC2 = calibration_array[2-1]; 
        AC3 = calibration_array[3-1]; 
        AC4 = calibration_array[4-1];
        AC5 = calibration_array[5-1];
        AC6 = calibration_array[6-1];
        B1 =  calibration_array[7-1];
        B2 =  calibration_array[8-1];
        MB =  calibration_array[9-1];
        MC = calibration_array[10-1];
        MD = calibration_array[11-1];
        
        if(debug){
            server.log(format("AC1: %d", AC1));
            server.log(format("AC2: %d", AC2));
            server.log(format("AC3: %d", AC3));
            server.log(format("AC4: %d", AC4));
            server.log(format("AC5: %d", AC5));
            server.log(format("AC6: %d", AC6));
            server.log(format("B1: %d", B1));
            server.log(format("B2: %d", B2));
            server.log(format("MB: %d", MB));
            server.log(format("MC: %d", MC));
            server.log(format("MD: %d", MD));
        }
    }
    else{
        if(log){
            server.log("I2C pressure not responding...");
        }
    }
}

function temperatureRead(){
    if(hardware.i2c12.write(pressure_module_address_write, format("%c%c", pressure_control_register_address, pressure_control_register_value_temperature_start)) == 0){
    //    sleep for 5 ms
        imp.sleep(0.005);
        local UT_array = hardware.i2c12.read(pressure_module_address_read, format("%c",pressure_control_register_value_MSB), 2);
    //    local UT = (UT_array[0]<<8) + UT_array[1];
        local UT = correct_signed_representation_calibration_constants(UT_array);
        local X1 = ((UT - AC6) * AC5) >> 15;    
        local X2 = (MC << 11) / (X1 + MD);
        B5 = X1 + X2;
        local T = (B5 + 8) >> 4;
        if(debug){
            server.log(format("UT: %d", UT));
            server.log(format("X1: %d", X1));
            server.log(format("X2: %d", X2));
            server.log(format("B5: %d", B5));
            server.log(format("T: %d", T))
    //        server.log(format("UT_array[0]: %d", UT_array[0]));
    //        server.log(format("UT_array[1]: %d", UT_array[1]));
        }
        local C = T / 10.0;
        local F = C * (9.0/5.0) + 32;
    //    server.log(format("Temperature: %3.1f%c%cC", C, 0xC2, 0xB0));
        temp_val = F;
        server.log(format("Temperature: %3.1f%c%cF", F, 0xC2,0xB0));
    }
    else{
        server.log("I2C temperature sensor not responding...")
    }
} 


function pressureRead(){
    local UP = 0;
    if(hardware.i2c12.write(pressure_module_address_write, format("%c", pressure_control_register_address) + pressure_control_register_value_start) == 0){
        imp.sleep(pressure_conv_time);
        local temp_array = hardware.i2c12.read(pressure_module_address_read, format("%c",pressure_control_register_value_MSB), pressure_bytes_convert);     
        UP = (correct_unsigned_representation_pressure(temp_array));    
        UP = (correct_unsigned_representation_pressure(temp_array)) >> (8-pressure_oversampling_setting);    
        
        local B6 = B5 - 4000;
        local X1_2 = (B2 * ((B6 * B6)>>12))>>11;
        local X2_2 = (AC2 * B6) >> 11;
        local X3_2 = X1_2 + X2_2;
        local B3_1 = ((((AC1 * 4) + X3_2) << pressure_oversampling_setting) + 2) >> 2;
        local X1_3 = (AC3 * B6) >> 13;
        local X2_3 = (B1*((B6*B6)>>12))>>16;
        local X3_3 = ((X1_3 + X2_3)+2) >> 2;
        local B4 = (AC4 * (X3_3 + 32768)) >> 15;
        local B7 = (UP - B3_1) * (50000 >> pressure_oversampling_setting);
        local p_1;
        if(B7 < 0x80000000){
            p_1 = (B7 * 2) / B4;
        }
        else{
            p_1 = (B7 / B4) * 2;
        }
        local X1_4 = (p_1 >> 8) * (p_1 >> 8);
        local X1_5 = (X1_4 * 3038) >> 16;
        local X2_4 = (-7357 * p_1) >> 16;
        local pressure_pascals = p_1 + ((X1_5 + X2_4 + 3791) >> 4);  
        local pressure_inHg = pressure_pascals * 0.000295299830714;
    //    local pressure_at_sea_level_in_pascals = 101325;
    //    local altitude = 44330 * (1-(pow((pressure_pascals/pressure_at_sea_level_in_pascals), 0.190294957183635)));
    //    server.log(altitude);
        server.log(format("Pressure: %d (Pascals)", pressure_pascals));
        server.log(format("Pressure: %3.3f (inHg)", pressure_inHg ));
        pressure_val = pressure_pascals;
        //agent.send("sendPressureToOpenSense", pressure_pascals);
        if(debug){
            server.log("BEGIN PRESSURE DEBUG");
            server.log(format("0: %d, 1: %d, 2: %d", temp_array[0], temp_array[1], temp_array[2]));
            server.log(format("UP %d", UP));
            server.log(format("expecting pressure of %d, got %d", 101592, p_2));
            server.log(format("B6: %d", B6));
            server.log(format("X1_2: %d", X1_2));
            server.log(format("X2_2: %d", X2_2));
            server.log(format("X3_2: %d", X3_2));
            server.log(format("B3_1: %d", B3_1));
            server.log(format("X1_3: %d", X1_3));
            server.log(format("X2_3: %d", X2_3));
            server.log(format("X3_3: %d", X3_3));
            server.log(format("B4: %d", B4));
            server.log(format("B7: %d", B7));    
            server.log(format("X1_4: %d", X1_4));
            server.log(format("p_1: %d", p_1));
            server.log(format("X1_5: %d", X1_5));
            server.log(format("X2_4: %d", X2_4));
            server.log(format("p_2: %d", p_2));
        }
    }
    else{
        server.log("I2C Pressure sensor not responding");
    }
}
 
 // I2C Interface to TI's ADC128D818
// Pin 1 is SCL
// Pin 2 is SDA
// set the I2C clock speed. We can do 10 kHz, 50 kHz, 100 kHz, or 400 kHz
// Max is 400kHz, min is 10Khz
hardware.i2c12.configure(CLOCK_SPEED_400_KHZ);
// The slave address for this device is set in hardware (pins A0 and A1 for ADC128D818)
adc_serial_bus_addr <- 0x1D;
adc_serial_bus_addr_write <- 0x3B;
adc_serial_bus_addr_read <- 0x3A;
busy_status_register <- 0x0C;
not_ready_bit_for_busy_status_register <- 1;
channel_disable_register <- 0x08;
configuration_register <- 0x00;
adc_start_bit_for_configuration_register <- 0;
//Default settings
//2.56V internal VREF
//Mode 0
//Low Power Conversion Mode

//Channel Readings Registers
//sense_zout <- 0x20;
sense_yout <- 0x21;
sense_xout <- 0x22;
sense_humidity <- 0x23;
sense_light <- 0x24;
//sense_temp <- 0x25;


//class AdcSensor {
//    constructor(my_adc_register, my_agent_text, variable_name)
//    {
//        adc_register = my_adc_register;
//        agent_text = my_agent_text;
//        variable = variable_name
//    }
//  adc_register = null;
//    agent_text = null;
//    variable = null;
//    
//    function read_and_send_bytes(){
//        if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c", adc_register)) == 0){
//            local result = hardware.i2c12.read(adc_serial_bus_addr_read, format("%c", adc_register), 2);
//            local converted_result = ((result[0]<<8) + result[1]);
//            if((adc_register == 0x21) || (adc_register == 0x22)){
//                //[V] * [g/V] = g => converted_result [V] * 2.7778 V/g
//                //Self-conversion (converted_result/10000.0[V]-((1.9+2.76)/2))/(.42)
//                server.log(format("%fg",((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42)));
//                variable = ((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42);
//                //agent.send(agent_text, ((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42));    
//            }
//            else{
//                server.log(format("I2C write successful for adc_register: 0x%x with read result: %d", adc_register, converted_result));
//                variable = converted_result;
//                //agent.send(agent_text, converted_result);    
//            }
//        }
//        else{
//            server.log("I2C ADC128D818 read unsuccessful");
//        }
//    }
//}

function read_and_send_bytes(adc_register){
    local  variable;
        if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c", adc_register)) == 0){
            local result = hardware.i2c12.read(adc_serial_bus_addr_read, format("%c", adc_register), 2);
            local converted_result = ((result[0]<<8) + result[1]);
            if((adc_register == 0x21) || (adc_register == 0x22)){
                //[V] * [g/V] = g => converted_result [V] * 2.7778 V/g
                //Self-conversion (converted_result/10000.0[V]-((1.9+2.76)/2))/(.42)
                server.log(format("%fg",((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42)));
                variable = ((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42);
                //agent.send(agent_text, ((converted_result/10000.0) - ((1.9+2.76)/2))/(0.42));    
            }
            else{
                server.log(format("I2C write successful for adc_register: 0x%x with read result: %d", adc_register, converted_result));
                variable = converted_result;
                //agent.send(agent_text, converted_result);    
            }
        }
        else{
            server.log("I2C ADC128D818 read unsuccessful");
        }
        return  variable;
    }
//acc_x_adc <- AdcSensor(sense_xout, "sendXAccelerationToOpenSense", acc_x_val);
//acc_y_adc <- AdcSensor(sense_yout, "sendYAccelerationToOpenSense", acc_y_val);
//humidity_adc <- AdcSensor(sense_humidity, "sendHumidityToOpenSense", humidity_val);
//light_adc <- AdcSensor(sense_light, "sendLightToOpenSense", light_val);

function adcReadings(){
   acc_x_val = read_and_send_bytes(sense_xout);
   acc_y_val = read_and_send_bytes(sense_yout); 
   humidity_val = read_and_send_bytes(sense_humidity); 
   light_val = read_and_send_bytes(sense_light); 
   imp.wakeup(wakeupTime, adcReadings);
}

function not_ready(){
    if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c", busy_status_register)) == 0){
        local not_ready = hardware.i2c12.read(adc_serial_bus_addr_read, format("%c", busy_status_register), 1);
        if((not_ready[0] & bit_value(not_ready_bit_for_busy_status_register))>>not_ready_bit_for_busy_status_register){
            return true;
        }
        else{
            imp.sleep(0.01);
            return false;
        }        
    }
    else{
        imp.sleep(0.01);
//        server.log("I2C failed to write")
    }
    imp.sleep(0.01);
    return true; 
}

function adcInit(){
    while(not_ready());
    //Disable INX and temperature
    local in0_bit = 0;
    local in5_bit = 5;
    local in6_bit = 6;    
    local adc_internal_temperature_bit = 7;
    local adc_initialize_bit = 7;
    local initialize_all = bit_value(adc_initialize_bit)
    local disable_data = bit_value(in0_bit) | bit_value(in5_bit) | bit_value(in6_bit) | bit_value(adc_internal_temperature_bit);
    if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c", configuration_register) + initialize_all) == 0){
        server.log("Initialize ok");
    }
    else{
        server.log("Initialization failed");
    }
    if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c%c", channel_disable_register, disable_data)) == 0){
        server.log("Configure adc ok");
    }
    else{
        server.log("Unable to configure I2C on ADC128D818");
    }    
    //Start ADC
    if(hardware.i2c12.write(adc_serial_bus_addr_write, format("%c", configuration_register) + bit_value(adc_start_bit_for_configuration_register)) == 0){
        server.log("Starting ADC...");
        adcReadings();
    }
    else{
       server.log("Unable to start I2C on ADC128D818"); 
    }
    //Note that interrupts are not enabled for ADC
}

 
function takeReadings(){
    motionSensorRead();
    readRSSI();
    bmp085_get_cal_params();
    temperatureRead();
    pressureRead();
    readInternalVoltage();

    
    sensor_values <- {
        acc_x= acc_x_val,
        acc_y= acc_y_val,
        acc_z= acc_z_val,
        motion = motion_val,
        audio = audio_val,
        temp= temp_val,
        light= light_val,
        pressure = pressure_val,
        timestamp = time(),
        id = device_id.tostring()
    };
    
    agent.send("postJSON", sensor_values);
    imp.wakeup(wakeupTime, takeReadings);
}

//Register with Electric Imp Servers
imp.configure(id, [ ] , [ microphone_output, motion_output, internal_voltage_output, rssi_output, light_output, acc_x_output, acc_y_output, acc_z_output, humidity_output, temperature_output, pressure_output ]);
 
server.show("Running..."); 

microphoneSample(); 
bmp085_get_cal_params();
takeReadings();
adcInit();


